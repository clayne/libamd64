libamd64 is an assembler and disassembler library for the AMD64 architecture.

Because this library's intended use is for JIT code generation, don't expect it
to work or even build on non-AMD64 architectures. It doesn't (yet) support all
opcodes, but it supports a diverse enough subset to be able to express most
programs.

To generate code, create an AMD64Assembler object and call the various write
functions on it. When you've generated all the code you want to, call assemble()
on it, add the code to a CodeBuffer, and call it. Here's an example
implementation of the FNV1A64 hash function:

    AMD64Assembler as;

    as.write_mov(rax, 0xCBF29CE484222325);
    as.write_add(rsi, rdi);
    as.write_xor(rdx, rdx);
    as.write_mov(rcx, 0x00000100000001B3);
    as.write_jmp("check_end");

    as.write_label("continue");
    as.write_mov(dl, MemoryReference(rdi, 0), OperandSize::Byte);
    as.write_xor(rax, rdx);
    as.write_imul(rax, rcx);
    as.write_inc(rdi);
    as.write_label("check_end");
    as.write_cmp(rdi, rsi);
    as.write_jne("continue");

    multimap<size_t, string> compiled_labels;
    unordered_set<size_t> patch_offsets;
    string data = as.assemble(&patch_offsets, &compiled_labels);

    CodeBuffer code;
    auto ret = reinterpret_cast<uint64_t(*)(const void*, size_t)>(
            code.append(data, &patch_offsets));

To disassemble code, call the static function AMD64Assembler::disassemble.

This library depends on phosg (https://www.github.com/fuzziqersoftware/phosg).
To build and install this library, first build and install phosg, then run
`make && sudo make install` in this directory.
